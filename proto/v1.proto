syntax = "proto3";

package api;

option go_package = "github.com/axsh/openvdc/api";

import "model.proto";

service Instance {
  rpc Create (CreateRequest) returns (CreateReply){}
  rpc Start (StartRequest) returns (StartReply){}
  rpc Run (ResourceRequest) returns (RunReply){}
  rpc Stop (StopRequest) returns (StopReply){}
  rpc Destroy (DestroyRequest) returns (DestroyReply){}
  rpc Console (ConsoleRequest) returns (ConsoleReply){}
  rpc Show (InstanceIDRequest) returns (InstanceReply){}
  rpc List (InstanceListRequest) returns (InstanceListReply){}
  rpc Log (InstanceLogRequest) returns (stream InstanceLogReply){}
}

message RunReply {
  string instance_id = 1;
  string resource_id = 2;
}

message StopRequest{
  string instance_id = 1;
}
message StopReply {
  string instance_id = 1;
}

message DestroyRequest{
  string instance_id = 1;
}
message DestroyReply {
  string instance_id = 1;
}

message ConsoleRequest{
  string instance_id = 1;
}
message ConsoleReply {
  string instance_id = 1;
}

message CreateRequest{
  string resource_id = 1;
}
message CreateReply{
  string instance_id = 1;
}

message StartRequest {
  string instance_id = 1;
}
message StartReply {
  string instance_id = 1;
}

message InstanceIDRequest {
  oneof Key {
    string ID = 1;
    string Name = 2;
  }
}

message InstanceReply {
  string ID = 1;
  model.Instance instance = 2;
}

message InstanceListRequest {
  message PageRequest {
    int32 offset = 1;
    int32 limit = 2;
  }
  PageRequest page = 1;
  message Filter {
    model.InstanceState.State state = 1;
  }
  Filter filter = 2;
}

message InstanceListReply {
  message PageReply {
    int32 total = 1;
    int32 current = 2;
    int32 limit = 3;
  }
  PageReply page = 1;
  message InstanceListItem {
    string id = 1;
    model.InstanceState.State state = 2;
  }
  repeated InstanceListItem items = 2;
}

message InstanceLogRequest {
  InstanceIDRequest Target = 1;
}

message InstanceLogReply {
  repeated string Line = 1;
}

service Resource {
  rpc Register(ResourceRequest) returns (ResourceReply){}
  rpc Unregister(ResourceIDRequest) returns (ResourceReply){}
  rpc Show(ResourceIDRequest) returns (ResourceReply){}
}

message ResourceRequest {
  model.Template template = 1;
}
message ResourceReply {
  string ID = 1;
  model.Resource resource = 2;
}

message ResourceIDRequest{
  oneof Key {
    string ID = 1;
    string Name = 2;
  }
}
