// Code generated by go-bindata.
// sources:
// schema/v1.json
// DO NOT EDIT!

package registry

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaV1Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x4b\x6f\xdb\x3c\x10\xbc\xeb\x57\x10\x4c\x8e\x8e\xf9\xe5\x43\x4e\xbe\xb6\xf7\x00\x6d\xd1\x4b\x61\x18\x0c\xb5\x96\x98\x8a\x8f\x92\x94\x12\xa3\xf0\x7f\x2f\xa8\x97\xf5\x20\x55\x25\x48\x0f\x3e\xd9\xda\xe5\x8c\x66\x67\x57\x24\x7f\x27\x08\x61\x9e\xe2\x1d\xc2\xb9\x73\xda\xee\x08\x31\xf4\x65\x9b\x71\x97\x97\x4f\xa5\x05\xc3\x94\x74\x20\xdd\x96\x29\x41\xe8\xab\xcd\x89\xd2\x20\xab\x94\x11\x41\xad\x03\x43\x2c\xcb\x41\x50\x52\xdd\x6f\x9f\xad\x92\x37\x78\xe3\x09\x6f\x9b\x68\xc7\xba\x23\xc4\x27\xef\x9a\xe8\x56\x99\x8c\xa4\x86\x1e\xdd\xdd\x7f\x0f\x2d\xbe\xc5\xa5\x60\x99\xe1\xda\x71\x25\x3d\xf6\x51\x83\xfc\xfe\xf9\x13\xfa\x02\x56\x95\x86\x01\xfa\x06\x42\x17\xd4\x01\xfa\xda\xf0\xd7\x20\x77\xd2\xe0\x57\xab\xa7\x67\x60\xae\x89\x69\xa3\x34\x18\xc7\xc1\xe2\x1d\xf2\x35\x22\x84\x0f\x4c\x09\x01\xd2\xf5\x91\x01\xd6\x3a\xc3\x65\x86\xeb\xf0\x79\xd3\xac\x77\xdc\x15\xb0\x76\xf1\x58\xf9\x3a\xfe\xb6\x98\xd0\xfa\x41\x2d\x75\x5c\x49\x78\x3c\xe2\x1d\xfa\xd1\x06\x50\x0f\xa9\xd3\xb7\x06\x7c\x16\xdf\x90\x8e\xd4\x12\xa9\x24\xe0\x7e\xd1\x79\xb3\x1e\x59\xbc\xb2\xf7\x01\x65\x59\x14\x03\x64\xfb\x6f\x9f\x74\x4f\x35\x17\x36\xf0\xab\xe4\x06\xd2\xbe\x9c\xd6\xe9\xa9\x2d\x09\x42\xfb\xa6\xc1\xdd\x0b\x2e\xbd\xac\x8b\x1b\xf8\x36\xe3\xbc\xb8\xd9\xa9\xe8\xbd\x0c\xcc\x46\x6c\x3e\xa2\x3d\x9c\x38\xd3\xad\x19\xe1\x40\x96\x62\xa4\xe7\xa2\x7c\x10\xda\x07\xf9\x34\x35\x54\xdc\xbf\x47\x49\x8d\xfc\x7f\x35\x32\x19\xfe\x76\x93\xe9\x07\xe0\x2a\xcd\xad\xc4\x78\x78\x63\xf6\x0a\x2e\x0f\x15\xd3\x65\x4c\x0d\x97\x0e\x32\x30\x78\x33\x4c\xa6\x70\xa4\x65\xe1\x2b\xb8\x8f\x92\x0a\x10\xca\x9c\x0e\xd9\xd3\x87\x32\x7f\xbc\xd4\x7f\x22\xb3\x78\x65\x07\x2e\x68\x36\x6b\x56\x64\x57\x43\x0b\x03\x83\x16\x86\x06\x2d\x0d\xce\x44\x54\x23\x5c\xbd\xc8\x42\xd1\xf4\x50\x9a\x62\x05\xd7\x66\x9a\x3f\x2a\x23\xa8\x57\x81\x4b\xc3\x97\x5f\xc5\x72\x60\x3f\x6d\x29\x0e\x81\xa1\x7d\xb3\xee\x8e\xec\xcd\x3c\x49\x84\xb3\xee\xab\x39\x52\x16\x72\xbb\x63\xa4\xc6\xd0\xd3\xc4\x04\xcc\x1d\x88\x39\x66\xb9\xb7\xe8\x2f\xfd\x45\x91\x8f\x3b\x56\xe3\x94\x1b\x45\x37\x82\x3e\x5b\x81\xcb\x83\xb8\x6e\x27\x8e\xe4\x40\x68\x37\xf5\xe0\x42\x5a\x50\x19\xcb\x09\xca\x96\xd2\x3a\x3f\x59\x1c\x48\xed\x67\xb1\xf3\x9c\xc1\x93\xd3\x34\x35\x2b\xed\x5a\x45\xc9\x75\xf5\xf0\x06\xce\x60\x0b\x2e\x9f\x87\x67\x0b\xbc\x37\x59\x7a\x8e\x0f\x6b\xf0\xdc\x41\xb3\x0f\x3a\xbc\xdb\x07\x0f\xb6\xfa\x82\x72\xad\x27\xdb\xf8\x76\x75\xcd\x47\xdb\xb8\x37\xfe\x62\x98\x9c\x93\x3f\x01\x00\x00\xff\xff\x68\x04\x28\x1f\x8a\x0c\x00\x00")

func schemaV1JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaV1Json,
		"schema/v1.json",
	)
}

func schemaV1Json() (*asset, error) {
	bytes, err := schemaV1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/v1.json", size: 3210, mode: os.FileMode(420), modTime: time.Unix(1480916389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/v1.json": schemaV1Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"v1.json": &bintree{schemaV1Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

