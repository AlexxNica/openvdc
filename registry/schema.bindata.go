// Code generated by go-bindata.
// sources:
// schema/v1.json
// DO NOT EDIT!

package registry

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaV1Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x54\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x08\x25\xc7\xcd\xaa\x81\x9e\x7c\x6d\xef\x81\xb6\xf4\x52\x16\xa3\x95\x67\x6d\xa5\xd6\x47\x47\xd2\x66\x43\xf1\x7f\x2f\xf2\xd7\x5a\x6b\x27\x6c\x4a\x21\xd0\x9b\x3d\x33\xef\x69\xe6\x3d\x8d\x7e\x67\x84\x50\x59\xd2\x9c\xd0\xda\x7b\xeb\x72\xc6\x90\x3f\x6d\x2b\xe9\xeb\xb0\x0f\x0e\x50\x18\xed\x41\xfb\xad\x30\x8a\xf1\x93\xab\x99\xb1\xa0\x8f\xa5\x60\x8a\x3b\x0f\xc8\x9c\xa8\x41\x71\x76\xbc\xdf\x3e\x3a\xa3\x6f\xe8\x26\x12\xde\xf6\xd1\x91\x35\x67\x2c\x26\xef\xfa\xe8\xd6\x60\xc5\x4a\xe4\x07\x7f\xf7\xe1\xe3\x80\x1f\x70\x25\x38\x81\xd2\x7a\x69\x74\xc4\x3e\x58\xd0\xdf\x3f\x7f\x22\x5f\xc0\x99\x80\x02\xc8\x37\x50\xb6\xe1\x1e\xc8\xd7\x9e\xbf\x03\xf9\x67\x0b\xb1\xda\xec\x1f\x41\xf8\x3e\x66\xd1\x58\x40\x2f\xc1\xd1\x9c\xc4\x19\x63\x9d\xf4\x0d\x4c\xbf\x33\xa0\xf3\x28\x75\x45\xbb\x70\xbb\xe9\x8b\xd3\x4e\xae\x82\xf8\xa1\xb9\xb5\xfa\x59\x6f\x5d\xdc\x68\x78\x38\xd0\x9c\xfc\x18\x02\x64\x82\x74\xe9\x5b\x84\x98\xa5\x37\x6c\x24\x75\x4c\x1b\x0d\x74\x2a\x6a\x37\xd7\x23\x9b\x93\xf8\x3b\xa0\x0e\x4d\x33\x43\x0e\x5f\xbb\x6c\xfc\xeb\xb8\x28\xc2\xaf\x20\x11\xca\x69\x9c\x41\xe9\x4b\x59\x32\x42\x76\xbd\x61\xe3\x01\x67\x6f\xba\xe1\x66\xba\x2d\x38\xcf\x6a\x8e\x5d\x4c\x5a\xae\x78\x3d\xd7\x3e\x99\x12\x74\x50\x09\xe7\xf9\xf4\x59\x68\xb7\x98\xb9\x4d\x9c\x8e\x82\xbe\x5b\xb3\x89\x9b\x49\xaf\x67\x67\xa9\x92\x5a\xaa\xa0\x8a\xa3\xb0\xe1\x92\x76\xbc\x93\x52\x7b\xa8\x00\xe9\x66\x9e\x2c\xe1\xc0\x43\xe3\x69\x4e\xee\x5f\x25\x56\xa0\x0c\x3e\x17\xd5\xfe\x9f\xb2\x37\x27\x51\x48\xc5\xab\x85\x14\x2f\xec\xd1\x6b\x92\xf6\x07\x9a\x27\xdd\x18\x5e\x16\x01\x9b\x45\x76\xb9\xcf\x9b\xcb\xfc\xc1\xa0\xe2\xb1\x5f\x1a\x50\xd2\x24\xdb\xa6\xc5\x54\xd4\x20\x7e\xba\xa0\x8a\x15\x2b\xd7\xce\xba\x8a\xec\xcd\x3c\xd9\x0b\x9c\xeb\x97\x74\xa9\xd1\x1b\xb6\xa0\x7b\x1d\xde\x6f\x67\x93\xb7\xe9\x7f\xd8\x83\x54\xe4\xf8\xbc\x66\x6d\xf6\x27\x00\x00\xff\xff\xc4\x25\x51\x81\xa0\x07\x00\x00")

func schemaV1JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaV1Json,
		"schema/v1.json",
	)
}

func schemaV1Json() (*asset, error) {
	bytes, err := schemaV1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/v1.json", size: 1952, mode: os.FileMode(420), modTime: time.Unix(1480482099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/v1.json": schemaV1Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"v1.json": &bintree{schemaV1Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

