// Code generated by go-bindata.
// sources:
// schema/v1.json
// DO NOT EDIT!

package registry

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaV1Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x55\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\x6a\x8f\x69\xb4\x0c\x3b\xe5\xba\xdd\x0b\x6c\xc3\x2e\x43\x60\x28\x32\x63\xab\xb3\x3e\x46\x49\x69\x8a\x21\xff\x7d\x90\xbf\x62\x27\x76\xe0\x16\xed\x21\xa7\x36\x24\xdf\xf3\x23\xf9\x4c\xff\x4b\x08\xa1\x32\xa3\x6b\x42\x0b\xef\xad\x5b\x33\x86\xfc\x79\x99\x4b\x5f\x84\x6d\x70\x80\xc2\x68\x0f\xda\x2f\x85\x51\x8c\x1f\x5c\xc1\x8c\x05\xbd\xcf\x04\x53\xdc\x79\x40\xe6\x44\x01\x8a\xb3\xfd\x6a\xf9\xe4\x8c\xbe\xa3\x8b\x48\x78\x5f\x47\x5b\xd6\x35\x63\x31\xf9\x50\x47\x97\x06\x73\x96\x21\xdf\xf9\x87\x4f\x5f\x1a\x7c\x83\xcb\xc0\x09\x94\xd6\x4b\xa3\x23\xf6\xd1\x82\xfe\xf5\xed\x2b\xf9\x0e\xce\x04\x14\x40\x7e\x82\xb2\x25\xf7\x40\x7e\xd4\xfc\x15\xc8\xbf\x58\x88\xd5\x66\xfb\x04\xc2\xd7\x31\x8b\xc6\x02\x7a\x09\x8e\xae\x49\xec\x91\x10\x9a\x0a\xa3\x14\x68\xdf\x45\x7a\x58\xe7\x51\xea\x9c\x56\xe1\xe3\xa2\xae\xf7\xd2\x97\x30\xb7\x78\xa8\x7c\x1e\x7f\xd3\xcc\x58\x7d\xaf\x97\x2a\x6e\x34\x3c\xee\xe8\x9a\xfc\x6e\x02\xa4\x83\x54\xe9\x7b\x84\x98\xa5\x77\xac\x25\x75\x4c\x1b\x0d\xb4\x2b\x3a\x2e\xe6\x23\xcb\x83\x78\x1b\x50\x87\xb2\xec\x21\x9b\xff\x36\x49\xfb\xab\xe2\xa2\x08\x7f\x83\x44\xc8\xba\x76\x9a\x49\x9f\x8f\x25\x21\x64\x53\x2f\xb8\x7d\xc0\x69\x97\x55\x73\xbd\xb9\x5d\x70\x9e\xa6\xd9\xaa\xe8\x66\x39\xe2\x8d\x29\x7f\x4c\xee\xf0\x6c\x32\x6d\xcd\x00\x07\x3a\xa8\x81\x9e\x93\xf2\x5e\x68\x33\xca\x67\x39\x72\xb5\x7a\x8b\x92\x0a\xf9\x79\x36\x32\xe9\xff\x6d\x9d\x19\x0d\x70\x93\xc3\x1d\x38\x77\x6a\xb6\x4a\xea\x74\x2f\x6c\x98\x92\x22\xb5\x87\x1c\x90\x2e\xfa\xc9\x0c\x76\x3c\x94\x51\xfe\x6a\x92\x54\x81\x32\xf8\x92\xe6\xdb\x77\x65\x7e\x7f\xa9\x1f\x22\xb3\x3c\x88\x54\x2a\x9e\x5f\x6c\x6a\xe2\xa4\x91\x2b\x6e\x21\x57\x1c\x43\xae\xb9\xe6\x4c\x54\x2d\xdc\x3c\xeb\xd2\xf0\x2c\x0d\x58\xce\xe0\x5a\x9c\xe7\x77\x06\x15\x8f\x2a\x68\x40\x79\xfd\x51\xa2\x00\xf1\xc7\x05\x95\x8e\x38\xf6\xd5\xba\x5b\xb2\x57\xf3\x24\x13\x9c\xe3\xef\xf1\xe5\x8c\xc6\x5f\xa0\xd1\x43\x51\x1d\xfc\x9b\xbc\x14\xc3\x4f\xd5\x2d\x9f\x8a\xe1\x62\xe2\x57\x36\x39\x26\xff\x03\x00\x00\xff\xff\x79\x0a\x3d\xf4\xd7\x09\x00\x00")

func schemaV1JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaV1Json,
		"schema/v1.json",
	)
}

func schemaV1Json() (*asset, error) {
	bytes, err := schemaV1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/v1.json", size: 2519, mode: os.FileMode(420), modTime: time.Unix(1480915987, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/v1.json": schemaV1Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"v1.json": &bintree{schemaV1Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

