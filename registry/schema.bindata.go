// Code generated by go-bindata.
// sources:
// ../schema/v1.json
// DO NOT EDIT!

package registry

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _SchemaV1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x3b\x6f\xdb\x30\x10\xde\xf5\x2b\x08\x26\x5b\x6d\x2b\x09\xb2\xd4\x5b\xd1\xa2\x6b\x80\xb6\xe8\x12\xb8\x06\x4d\x9d\x25\xa6\xe2\xa3\x47\xca\x89\x11\xf8\xbf\x17\x94\x2c\x5b\x96\x44\x55\x79\x74\xf0\x64\xeb\x8e\xdf\xc7\xef\x1e\xe4\xf1\x39\x22\x84\x8a\x84\xce\x09\xcd\x9c\x33\x76\x1e\xc7\xc8\x1e\x67\xa9\x70\x59\xb1\x2a\x2c\x20\xd7\xca\x81\x72\x33\xae\x65\xcc\x9e\x6c\x16\x6b\x03\x6a\x93\xf0\x58\x32\xeb\x00\x63\xcb\x33\x90\x2c\xde\x5c\xcf\x1e\xac\x56\x17\x74\xe2\x09\x2f\x2b\x6b\xcd\x3a\x8f\x63\xef\x9c\x56\xd6\x99\xc6\x34\x4e\x90\xad\xdd\xf4\xea\x76\x8f\xdf\xe3\x12\xb0\x1c\x85\x71\x42\x2b\x8f\xbd\x33\xa0\x7e\x7e\xf9\x4c\xbe\x81\xd5\x05\x72\x20\x3f\x40\x9a\x9c\x39\x20\xdf\x2b\xfe\x12\xe4\xb6\x06\xfc\x6a\xbd\x7a\x00\xee\x2a\x9b\x41\x6d\x00\x9d\x00\x4b\xe7\xc4\xc7\x48\x08\x5d\x72\x2d\x25\x28\x77\xb0\x34\xb0\xd6\xa1\x50\x29\x2d\xcd\xbb\x49\xb5\xde\x09\x97\xc3\xd8\xc5\xa7\xca\xc7\xf1\xef\x83\xe9\x5b\xdf\x88\xa5\xb4\x6b\x05\x77\x6b\x3a\x27\xf7\x7b\x03\x39\x40\x4a\xf7\x25\x82\xf7\xd2\x8b\xb8\x26\xb5\xb1\xd2\x0a\xe8\x61\xd1\x6e\x32\x1e\x99\x3f\xf1\xd7\x01\x55\x91\xe7\x0d\xe4\xfe\xdf\x22\xaa\xbf\x4a\x2e\x8a\xf0\xa7\x10\x08\xc9\x21\x9c\x7d\xa6\xdb\x69\x89\x08\x59\x54\x05\xae\x37\x38\xd6\xb2\x0c\xae\x91\xb7\x0e\xe7\x31\x9b\xb5\x8a\x43\x2e\x7b\x7a\x23\xd4\x1f\xc1\x1a\xb6\x32\x53\xaf\x39\xc1\x81\x2a\xe4\x89\x9e\xa3\xf2\x86\x69\xd1\xcb\x67\x18\x32\x79\xfd\x1a\x25\x25\xf2\x66\x34\x32\x6a\xfe\xd6\x9d\xe9\x1b\xe0\x2c\x93\xbb\x91\xa7\xcd\x1b\x4a\xaf\x14\x6a\xb9\xe1\xa6\x08\xa9\x11\xca\x41\x0a\x48\x27\x4d\x67\x02\x6b\x56\xe4\x3e\x82\xeb\x20\xa9\x04\xa9\x71\xbb\x4c\x57\xef\xca\xfc\xfe\x52\xff\x8b\xcc\xfc\x89\x2f\x85\x64\x69\xa7\x58\x81\x5b\x8d\x0c\x34\x0c\x19\x68\x1a\x32\xd4\x38\x2d\x51\x95\x70\xfd\xa8\x72\xcd\x92\x65\x81\xf9\x08\xae\x49\xdb\xbf\xd6\x28\x99\x57\x41\x0b\x14\xc3\x5b\xf1\x0c\xf8\x6f\x5b\xc8\x65\x4f\xd3\xbe\x58\x77\x4d\xf6\x62\x9e\x28\xc0\x59\xd6\x15\xd7\x8c\xf7\x65\xbb\x66\x64\x88\x6c\xdb\x4a\x02\x15\x0e\x64\x17\x33\x5c\x5b\xf2\x8f\xfa\x92\xc0\xe1\x0e\xc5\xd8\xe6\x26\xc1\x8b\xe0\xe0\xdd\x80\xcb\x7a\x71\xf5\x4d\x1c\xf0\x81\x34\xae\x9d\x83\x23\x69\xce\x54\xc8\x27\x19\x1f\x72\x9b\x6c\x6b\x69\x8f\x6b\xd1\xb1\xed\xba\x0c\x9e\x9c\x25\x09\xbe\x25\x5d\x86\x39\x07\x58\xbe\xae\x7e\xdd\x5f\x4d\x3f\xb2\xe9\xfa\xd3\xf4\xeb\xe2\xf9\x66\x77\xfc\x9a\x2f\x3e\x5c\x76\x45\xf6\x09\x12\x66\x73\xfb\x56\x45\xc7\xc3\xe5\xd9\xc6\xed\xbb\x42\x91\xa4\x40\xc9\xb8\x6d\xbb\x94\xd1\xd0\x77\xf8\xf4\xf4\x0e\x42\xd2\xb9\x61\xfa\xc7\x4f\xef\xa4\x2d\x5f\x4c\xe7\x3a\x6a\x4f\x9f\x7b\xa1\x59\x7b\x26\xc3\xeb\x1c\x9e\x04\xa7\x2d\xe4\x1f\xd4\xd1\x2e\xfa\x1b\x00\x00\xff\xff\x96\xcd\x5c\x54\xc2\x0d\x00\x00")

func SchemaV1JsonBytes() ([]byte, error) {
	return bindataRead(
		_SchemaV1Json,
		"../schema/v1.json",
	)
}

func SchemaV1Json() (*asset, error) {
	bytes, err := SchemaV1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../schema/v1.json", size: 3522, mode: os.FileMode(420), modTime: time.Unix(1488962784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../schema/v1.json": SchemaV1Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"v1.json": &bintree{SchemaV1Json, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

