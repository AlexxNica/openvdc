// Code generated by protoc-gen-go.
// source: v1.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	v1.proto

It has these top-level messages:
	RunReply
	StopRequest
	StopReply
	DestroyRequest
	DestroyReply
	ConsoleRequest
	ConsoleReply
	CreateRequest
	CreateReply
	StartRequest
	StartReply
	InstanceIDRequest
	InstanceReply
	InstanceListRequest
	InstanceListReply
	InstanceLogRequest
	InstanceLogReply
	ResourceRequest
	ResourceReply
	ResourceIDRequest
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import model "github.com/axsh/openvdc/model"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RunReply struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
}

func (m *RunReply) Reset()                    { *m = RunReply{} }
func (m *RunReply) String() string            { return proto.CompactTextString(m) }
func (*RunReply) ProtoMessage()               {}
func (*RunReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RunReply) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *RunReply) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

type StopRequest struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StopRequest) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type StopReply struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *StopReply) Reset()                    { *m = StopReply{} }
func (m *StopReply) String() string            { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()               {}
func (*StopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StopReply) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type DestroyRequest struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *DestroyRequest) Reset()                    { *m = DestroyRequest{} }
func (m *DestroyRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroyRequest) ProtoMessage()               {}
func (*DestroyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DestroyRequest) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type DestroyReply struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *DestroyReply) Reset()                    { *m = DestroyReply{} }
func (m *DestroyReply) String() string            { return proto.CompactTextString(m) }
func (*DestroyReply) ProtoMessage()               {}
func (*DestroyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DestroyReply) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type ConsoleRequest struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *ConsoleRequest) Reset()                    { *m = ConsoleRequest{} }
func (m *ConsoleRequest) String() string            { return proto.CompactTextString(m) }
func (*ConsoleRequest) ProtoMessage()               {}
func (*ConsoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConsoleRequest) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type ConsoleReply struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *ConsoleReply) Reset()                    { *m = ConsoleReply{} }
func (m *ConsoleReply) String() string            { return proto.CompactTextString(m) }
func (*ConsoleReply) ProtoMessage()               {}
func (*ConsoleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ConsoleReply) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type CreateRequest struct {
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

type CreateReply struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *CreateReply) Reset()                    { *m = CreateReply{} }
func (m *CreateReply) String() string            { return proto.CompactTextString(m) }
func (*CreateReply) ProtoMessage()               {}
func (*CreateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateReply) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type StartRequest struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StartRequest) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type StartReply struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *StartReply) Reset()                    { *m = StartReply{} }
func (m *StartReply) String() string            { return proto.CompactTextString(m) }
func (*StartReply) ProtoMessage()               {}
func (*StartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StartReply) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type InstanceIDRequest struct {
	// Types that are valid to be assigned to Key:
	//	*InstanceIDRequest_ID
	//	*InstanceIDRequest_Name
	Key isInstanceIDRequest_Key `protobuf_oneof:"Key"`
}

func (m *InstanceIDRequest) Reset()                    { *m = InstanceIDRequest{} }
func (m *InstanceIDRequest) String() string            { return proto.CompactTextString(m) }
func (*InstanceIDRequest) ProtoMessage()               {}
func (*InstanceIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isInstanceIDRequest_Key interface {
	isInstanceIDRequest_Key()
}

type InstanceIDRequest_ID struct {
	ID string `protobuf:"bytes,1,opt,name=ID,oneof"`
}
type InstanceIDRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=Name,oneof"`
}

func (*InstanceIDRequest_ID) isInstanceIDRequest_Key()   {}
func (*InstanceIDRequest_Name) isInstanceIDRequest_Key() {}

func (m *InstanceIDRequest) GetKey() isInstanceIDRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *InstanceIDRequest) GetID() string {
	if x, ok := m.GetKey().(*InstanceIDRequest_ID); ok {
		return x.ID
	}
	return ""
}

func (m *InstanceIDRequest) GetName() string {
	if x, ok := m.GetKey().(*InstanceIDRequest_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InstanceIDRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InstanceIDRequest_OneofMarshaler, _InstanceIDRequest_OneofUnmarshaler, _InstanceIDRequest_OneofSizer, []interface{}{
		(*InstanceIDRequest_ID)(nil),
		(*InstanceIDRequest_Name)(nil),
	}
}

func _InstanceIDRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InstanceIDRequest)
	// Key
	switch x := m.Key.(type) {
	case *InstanceIDRequest_ID:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ID)
	case *InstanceIDRequest_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("InstanceIDRequest.Key has unexpected type %T", x)
	}
	return nil
}

func _InstanceIDRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InstanceIDRequest)
	switch tag {
	case 1: // Key.ID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &InstanceIDRequest_ID{x}
		return true, err
	case 2: // Key.Name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &InstanceIDRequest_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _InstanceIDRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InstanceIDRequest)
	// Key
	switch x := m.Key.(type) {
	case *InstanceIDRequest_ID:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ID)))
		n += len(x.ID)
	case *InstanceIDRequest_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InstanceReply struct {
	ID       string          `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Instance *model.Instance `protobuf:"bytes,2,opt,name=instance" json:"instance,omitempty"`
}

func (m *InstanceReply) Reset()                    { *m = InstanceReply{} }
func (m *InstanceReply) String() string            { return proto.CompactTextString(m) }
func (*InstanceReply) ProtoMessage()               {}
func (*InstanceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *InstanceReply) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *InstanceReply) GetInstance() *model.Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

type InstanceListRequest struct {
	Page   *InstanceListRequest_PageRequest `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	Filter *InstanceListRequest_Filter      `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
}

func (m *InstanceListRequest) Reset()                    { *m = InstanceListRequest{} }
func (m *InstanceListRequest) String() string            { return proto.CompactTextString(m) }
func (*InstanceListRequest) ProtoMessage()               {}
func (*InstanceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *InstanceListRequest) GetPage() *InstanceListRequest_PageRequest {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *InstanceListRequest) GetFilter() *InstanceListRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type InstanceListRequest_PageRequest struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *InstanceListRequest_PageRequest) Reset()         { *m = InstanceListRequest_PageRequest{} }
func (m *InstanceListRequest_PageRequest) String() string { return proto.CompactTextString(m) }
func (*InstanceListRequest_PageRequest) ProtoMessage()    {}
func (*InstanceListRequest_PageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *InstanceListRequest_PageRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *InstanceListRequest_PageRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type InstanceListRequest_Filter struct {
	State model.InstanceState_State `protobuf:"varint,1,opt,name=state,enum=model.InstanceState_State" json:"state,omitempty"`
}

func (m *InstanceListRequest_Filter) Reset()                    { *m = InstanceListRequest_Filter{} }
func (m *InstanceListRequest_Filter) String() string            { return proto.CompactTextString(m) }
func (*InstanceListRequest_Filter) ProtoMessage()               {}
func (*InstanceListRequest_Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 1} }

func (m *InstanceListRequest_Filter) GetState() model.InstanceState_State {
	if m != nil {
		return m.State
	}
	return model.InstanceState_REGISTERED
}

type InstanceListReply struct {
	Page  *InstanceListReply_PageReply          `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	Items []*InstanceListReply_InstanceListItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *InstanceListReply) Reset()                    { *m = InstanceListReply{} }
func (m *InstanceListReply) String() string            { return proto.CompactTextString(m) }
func (*InstanceListReply) ProtoMessage()               {}
func (*InstanceListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InstanceListReply) GetPage() *InstanceListReply_PageReply {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *InstanceListReply) GetItems() []*InstanceListReply_InstanceListItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type InstanceListReply_PageReply struct {
	Total   int32 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Current int32 `protobuf:"varint,2,opt,name=current" json:"current,omitempty"`
	Limit   int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *InstanceListReply_PageReply) Reset()                    { *m = InstanceListReply_PageReply{} }
func (m *InstanceListReply_PageReply) String() string            { return proto.CompactTextString(m) }
func (*InstanceListReply_PageReply) ProtoMessage()               {}
func (*InstanceListReply_PageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

func (m *InstanceListReply_PageReply) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *InstanceListReply_PageReply) GetCurrent() int32 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *InstanceListReply_PageReply) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type InstanceListReply_InstanceListItem struct {
	Id    string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State model.InstanceState_State `protobuf:"varint,2,opt,name=state,enum=model.InstanceState_State" json:"state,omitempty"`
}

func (m *InstanceListReply_InstanceListItem) Reset()         { *m = InstanceListReply_InstanceListItem{} }
func (m *InstanceListReply_InstanceListItem) String() string { return proto.CompactTextString(m) }
func (*InstanceListReply_InstanceListItem) ProtoMessage()    {}
func (*InstanceListReply_InstanceListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 1}
}

func (m *InstanceListReply_InstanceListItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InstanceListReply_InstanceListItem) GetState() model.InstanceState_State {
	if m != nil {
		return m.State
	}
	return model.InstanceState_REGISTERED
}

type InstanceLogRequest struct {
	Target *InstanceIDRequest `protobuf:"bytes,1,opt,name=Target" json:"Target,omitempty"`
}

func (m *InstanceLogRequest) Reset()                    { *m = InstanceLogRequest{} }
func (m *InstanceLogRequest) String() string            { return proto.CompactTextString(m) }
func (*InstanceLogRequest) ProtoMessage()               {}
func (*InstanceLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *InstanceLogRequest) GetTarget() *InstanceIDRequest {
	if m != nil {
		return m.Target
	}
	return nil
}

type InstanceLogReply struct {
	Line []string `protobuf:"bytes,1,rep,name=Line" json:"Line,omitempty"`
}

func (m *InstanceLogReply) Reset()                    { *m = InstanceLogReply{} }
func (m *InstanceLogReply) String() string            { return proto.CompactTextString(m) }
func (*InstanceLogReply) ProtoMessage()               {}
func (*InstanceLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *InstanceLogReply) GetLine() []string {
	if m != nil {
		return m.Line
	}
	return nil
}

type ResourceRequest struct {
	Template *model.Template `protobuf:"bytes,1,opt,name=template" json:"template,omitempty"`
}

func (m *ResourceRequest) Reset()                    { *m = ResourceRequest{} }
func (m *ResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*ResourceRequest) ProtoMessage()               {}
func (*ResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ResourceRequest) GetTemplate() *model.Template {
	if m != nil {
		return m.Template
	}
	return nil
}

type ResourceReply struct {
	ID       string          `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Resource *model.Resource `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
}

func (m *ResourceReply) Reset()                    { *m = ResourceReply{} }
func (m *ResourceReply) String() string            { return proto.CompactTextString(m) }
func (*ResourceReply) ProtoMessage()               {}
func (*ResourceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ResourceReply) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ResourceReply) GetResource() *model.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type ResourceIDRequest struct {
	// Types that are valid to be assigned to Key:
	//	*ResourceIDRequest_ID
	//	*ResourceIDRequest_Name
	Key isResourceIDRequest_Key `protobuf_oneof:"Key"`
}

func (m *ResourceIDRequest) Reset()                    { *m = ResourceIDRequest{} }
func (m *ResourceIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ResourceIDRequest) ProtoMessage()               {}
func (*ResourceIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type isResourceIDRequest_Key interface {
	isResourceIDRequest_Key()
}

type ResourceIDRequest_ID struct {
	ID string `protobuf:"bytes,1,opt,name=ID,oneof"`
}
type ResourceIDRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=Name,oneof"`
}

func (*ResourceIDRequest_ID) isResourceIDRequest_Key()   {}
func (*ResourceIDRequest_Name) isResourceIDRequest_Key() {}

func (m *ResourceIDRequest) GetKey() isResourceIDRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ResourceIDRequest) GetID() string {
	if x, ok := m.GetKey().(*ResourceIDRequest_ID); ok {
		return x.ID
	}
	return ""
}

func (m *ResourceIDRequest) GetName() string {
	if x, ok := m.GetKey().(*ResourceIDRequest_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ResourceIDRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ResourceIDRequest_OneofMarshaler, _ResourceIDRequest_OneofUnmarshaler, _ResourceIDRequest_OneofSizer, []interface{}{
		(*ResourceIDRequest_ID)(nil),
		(*ResourceIDRequest_Name)(nil),
	}
}

func _ResourceIDRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ResourceIDRequest)
	// Key
	switch x := m.Key.(type) {
	case *ResourceIDRequest_ID:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ID)
	case *ResourceIDRequest_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("ResourceIDRequest.Key has unexpected type %T", x)
	}
	return nil
}

func _ResourceIDRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ResourceIDRequest)
	switch tag {
	case 1: // Key.ID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &ResourceIDRequest_ID{x}
		return true, err
	case 2: // Key.Name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &ResourceIDRequest_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _ResourceIDRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ResourceIDRequest)
	// Key
	switch x := m.Key.(type) {
	case *ResourceIDRequest_ID:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ID)))
		n += len(x.ID)
	case *ResourceIDRequest_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*RunReply)(nil), "api.RunReply")
	proto.RegisterType((*StopRequest)(nil), "api.StopRequest")
	proto.RegisterType((*StopReply)(nil), "api.StopReply")
	proto.RegisterType((*DestroyRequest)(nil), "api.DestroyRequest")
	proto.RegisterType((*DestroyReply)(nil), "api.DestroyReply")
	proto.RegisterType((*ConsoleRequest)(nil), "api.ConsoleRequest")
	proto.RegisterType((*ConsoleReply)(nil), "api.ConsoleReply")
	proto.RegisterType((*CreateRequest)(nil), "api.CreateRequest")
	proto.RegisterType((*CreateReply)(nil), "api.CreateReply")
	proto.RegisterType((*StartRequest)(nil), "api.StartRequest")
	proto.RegisterType((*StartReply)(nil), "api.StartReply")
	proto.RegisterType((*InstanceIDRequest)(nil), "api.InstanceIDRequest")
	proto.RegisterType((*InstanceReply)(nil), "api.InstanceReply")
	proto.RegisterType((*InstanceListRequest)(nil), "api.InstanceListRequest")
	proto.RegisterType((*InstanceListRequest_PageRequest)(nil), "api.InstanceListRequest.PageRequest")
	proto.RegisterType((*InstanceListRequest_Filter)(nil), "api.InstanceListRequest.Filter")
	proto.RegisterType((*InstanceListReply)(nil), "api.InstanceListReply")
	proto.RegisterType((*InstanceListReply_PageReply)(nil), "api.InstanceListReply.PageReply")
	proto.RegisterType((*InstanceListReply_InstanceListItem)(nil), "api.InstanceListReply.InstanceListItem")
	proto.RegisterType((*InstanceLogRequest)(nil), "api.InstanceLogRequest")
	proto.RegisterType((*InstanceLogReply)(nil), "api.InstanceLogReply")
	proto.RegisterType((*ResourceRequest)(nil), "api.ResourceRequest")
	proto.RegisterType((*ResourceReply)(nil), "api.ResourceReply")
	proto.RegisterType((*ResourceIDRequest)(nil), "api.ResourceIDRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Instance service

type InstanceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	Run(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*RunReply, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyReply, error)
	Console(ctx context.Context, in *ConsoleRequest, opts ...grpc.CallOption) (*ConsoleReply, error)
	Show(ctx context.Context, in *InstanceIDRequest, opts ...grpc.CallOption) (*InstanceReply, error)
	List(ctx context.Context, in *InstanceListRequest, opts ...grpc.CallOption) (*InstanceListReply, error)
	Log(ctx context.Context, in *InstanceLogRequest, opts ...grpc.CallOption) (Instance_LogClient, error)
}

type instanceClient struct {
	cc *grpc.ClientConn
}

func NewInstanceClient(cc *grpc.ClientConn) InstanceClient {
	return &instanceClient{cc}
}

func (c *instanceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := grpc.Invoke(ctx, "/api.Instance/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := grpc.Invoke(ctx, "/api.Instance/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Run(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*RunReply, error) {
	out := new(RunReply)
	err := grpc.Invoke(ctx, "/api.Instance/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := grpc.Invoke(ctx, "/api.Instance/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyReply, error) {
	out := new(DestroyReply)
	err := grpc.Invoke(ctx, "/api.Instance/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Console(ctx context.Context, in *ConsoleRequest, opts ...grpc.CallOption) (*ConsoleReply, error) {
	out := new(ConsoleReply)
	err := grpc.Invoke(ctx, "/api.Instance/Console", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Show(ctx context.Context, in *InstanceIDRequest, opts ...grpc.CallOption) (*InstanceReply, error) {
	out := new(InstanceReply)
	err := grpc.Invoke(ctx, "/api.Instance/Show", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) List(ctx context.Context, in *InstanceListRequest, opts ...grpc.CallOption) (*InstanceListReply, error) {
	out := new(InstanceListReply)
	err := grpc.Invoke(ctx, "/api.Instance/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Log(ctx context.Context, in *InstanceLogRequest, opts ...grpc.CallOption) (Instance_LogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Instance_serviceDesc.Streams[0], c.cc, "/api.Instance/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Instance_LogClient interface {
	Recv() (*InstanceLogReply, error)
	grpc.ClientStream
}

type instanceLogClient struct {
	grpc.ClientStream
}

func (x *instanceLogClient) Recv() (*InstanceLogReply, error) {
	m := new(InstanceLogReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Instance service

type InstanceServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Start(context.Context, *StartRequest) (*StartReply, error)
	Run(context.Context, *ResourceRequest) (*RunReply, error)
	Stop(context.Context, *StopRequest) (*StopReply, error)
	Destroy(context.Context, *DestroyRequest) (*DestroyReply, error)
	Console(context.Context, *ConsoleRequest) (*ConsoleReply, error)
	Show(context.Context, *InstanceIDRequest) (*InstanceReply, error)
	List(context.Context, *InstanceListRequest) (*InstanceListReply, error)
	Log(*InstanceLogRequest, Instance_LogServer) error
}

func RegisterInstanceServer(s *grpc.Server, srv InstanceServer) {
	s.RegisterService(&_Instance_serviceDesc, srv)
}

func _Instance_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Run(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Console_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Console(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/Console",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Console(ctx, req.(*ConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Show(ctx, req.(*InstanceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Instance/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).List(ctx, req.(*InstanceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstanceLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstanceServer).Log(m, &instanceLogServer{stream})
}

type Instance_LogServer interface {
	Send(*InstanceLogReply) error
	grpc.ServerStream
}

type instanceLogServer struct {
	grpc.ServerStream
}

func (x *instanceLogServer) Send(m *InstanceLogReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Instance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Instance",
	HandlerType: (*InstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Instance_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Instance_Start_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Instance_Run_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Instance_Stop_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Instance_Destroy_Handler,
		},
		{
			MethodName: "Console",
			Handler:    _Instance_Console_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Instance_Show_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Instance_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _Instance_Log_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1.proto",
}

// Client API for Resource service

type ResourceClient interface {
	Register(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReply, error)
	Unregister(ctx context.Context, in *ResourceIDRequest, opts ...grpc.CallOption) (*ResourceReply, error)
	Show(ctx context.Context, in *ResourceIDRequest, opts ...grpc.CallOption) (*ResourceReply, error)
}

type resourceClient struct {
	cc *grpc.ClientConn
}

func NewResourceClient(cc *grpc.ClientConn) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) Register(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReply, error) {
	out := new(ResourceReply)
	err := grpc.Invoke(ctx, "/api.Resource/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Unregister(ctx context.Context, in *ResourceIDRequest, opts ...grpc.CallOption) (*ResourceReply, error) {
	out := new(ResourceReply)
	err := grpc.Invoke(ctx, "/api.Resource/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Show(ctx context.Context, in *ResourceIDRequest, opts ...grpc.CallOption) (*ResourceReply, error) {
	out := new(ResourceReply)
	err := grpc.Invoke(ctx, "/api.Resource/Show", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Resource service

type ResourceServer interface {
	Register(context.Context, *ResourceRequest) (*ResourceReply, error)
	Unregister(context.Context, *ResourceIDRequest) (*ResourceReply, error)
	Show(context.Context, *ResourceIDRequest) (*ResourceReply, error)
}

func RegisterResourceServer(s *grpc.Server, srv ResourceServer) {
	s.RegisterService(&_Resource_serviceDesc, srv)
}

func _Resource_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Resource/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Register(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Resource/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Unregister(ctx, req.(*ResourceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Resource/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Show(ctx, req.(*ResourceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Resource_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Resource_Unregister_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Resource_Show_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1.proto",
}

func init() { proto.RegisterFile("v1.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x6f, 0xda, 0x48,
	0x10, 0x07, 0x1b, 0x08, 0x8c, 0x13, 0x42, 0x36, 0x39, 0x0e, 0xf9, 0x74, 0x4a, 0x64, 0x9d, 0xee,
	0xa2, 0x4b, 0x62, 0x08, 0xa9, 0xfa, 0x27, 0x55, 0xfb, 0x90, 0xa0, 0x2a, 0xa8, 0xa8, 0x6a, 0x97,
	0xf4, 0xa5, 0x2f, 0x95, 0x03, 0x1b, 0x62, 0xc9, 0xd8, 0xae, 0xbd, 0xa4, 0xe5, 0xb1, 0x1f, 0xa9,
	0x52, 0x3f, 0x4e, 0x3f, 0x4c, 0xe5, 0xfd, 0x87, 0x4d, 0x41, 0x75, 0xfb, 0x82, 0xbc, 0xb3, 0xbf,
	0xdf, 0xcc, 0xce, 0x6f, 0x67, 0x66, 0x81, 0xea, 0xfd, 0xa9, 0x1d, 0x46, 0x01, 0x0d, 0x90, 0xee,
	0x84, 0xae, 0x69, 0x4c, 0x83, 0x31, 0xf1, 0xb8, 0xc5, 0x1a, 0x40, 0x15, 0xcf, 0x7c, 0x4c, 0x42,
	0x6f, 0x8e, 0xf6, 0xc1, 0x70, 0xfd, 0x98, 0x3a, 0xfe, 0x88, 0xbc, 0x77, 0xc7, 0xad, 0xe2, 0x41,
	0xf1, 0xb0, 0x86, 0x41, 0x9a, 0xfa, 0xe3, 0x04, 0x10, 0x91, 0x38, 0x98, 0x45, 0x1c, 0xa0, 0x71,
	0x80, 0x34, 0xf5, 0xc7, 0x96, 0x0d, 0xc6, 0x90, 0x06, 0x21, 0x26, 0x1f, 0x66, 0x24, 0xa6, 0x3f,
	0x75, 0x68, 0x1d, 0x43, 0x8d, 0xe3, 0xf3, 0x84, 0xb7, 0x4e, 0xa1, 0xde, 0x23, 0x31, 0x8d, 0x82,
	0x79, 0xee, 0x00, 0x6d, 0xd8, 0x54, 0x94, 0xbc, 0x31, 0x2e, 0x03, 0x3f, 0x0e, 0x3c, 0xf2, 0x2b,
	0x31, 0x14, 0x25, 0x57, 0x8c, 0x0e, 0x6c, 0x5d, 0x46, 0xc4, 0xa1, 0xe9, 0x10, 0x69, 0x5d, 0x8b,
	0xab, 0x74, 0x95, 0x8c, 0x5c, 0x11, 0xda, 0xb0, 0x39, 0xa4, 0x4e, 0x44, 0x73, 0xe7, 0x70, 0x02,
	0x20, 0x08, 0xb9, 0xfc, 0x5f, 0xc0, 0x4e, 0x5f, 0xae, 0x7a, 0x32, 0x48, 0x03, 0xb4, 0x7e, 0x8f,
	0x83, 0xaf, 0x0a, 0x58, 0xeb, 0xf7, 0xd0, 0x1e, 0x94, 0x5e, 0x39, 0x53, 0xc2, 0x0b, 0xe5, 0xaa,
	0x80, 0xd9, 0xea, 0xa2, 0x0c, 0xfa, 0x4b, 0x32, 0xb7, 0x06, 0xb0, 0x25, 0x7d, 0xf0, 0xa8, 0xf5,
	0x05, 0x9f, 0xb1, 0x8f, 0xa0, 0x2a, 0x43, 0x32, 0x0f, 0x46, 0x77, 0xdb, 0xe6, 0xa5, 0xab, 0x78,
	0x0a, 0x60, 0x7d, 0xd6, 0x60, 0x57, 0x9a, 0x07, 0x6e, 0xac, 0x32, 0x7f, 0x0c, 0xa5, 0xd0, 0x99,
	0x10, 0xe6, 0xd6, 0xe8, 0xfe, 0x63, 0x3b, 0xa1, 0x6b, 0xaf, 0xc0, 0xd9, 0xaf, 0x9d, 0x89, 0xbc,
	0x0e, 0xcc, 0x18, 0xe8, 0x11, 0x54, 0x6e, 0x5d, 0x8f, 0x92, 0x48, 0x04, 0xdf, 0x5f, 0xcb, 0x7d,
	0xc1, 0x60, 0x58, 0xc0, 0xcd, 0xa7, 0x60, 0xa4, 0xbc, 0xa1, 0x26, 0x54, 0x82, 0xdb, 0xdb, 0x98,
	0x50, 0x76, 0x86, 0x32, 0x16, 0x2b, 0xb4, 0x07, 0x65, 0xcf, 0x9d, 0xba, 0x94, 0xb9, 0x2f, 0x63,
	0xbe, 0x30, 0xcf, 0xa1, 0xc2, 0xdd, 0xa1, 0x0e, 0x94, 0x63, 0xea, 0x50, 0x7e, 0xf4, 0x7a, 0xd7,
	0x5c, 0xca, 0x7d, 0x98, 0xec, 0xd9, 0xec, 0x17, 0x73, 0xa0, 0xf5, 0x45, 0x5b, 0x5c, 0x0b, 0x3f,
	0x5f, 0x22, 0xeb, 0x83, 0x8c, 0x02, 0x07, 0x2b, 0xb2, 0x08, 0xbd, 0xb9, 0xc8, 0x3f, 0xf4, 0xe6,
	0x22, 0xfb, 0x67, 0x50, 0x76, 0x29, 0x99, 0xc6, 0x2d, 0xed, 0x40, 0x3f, 0x34, 0xba, 0xff, 0xad,
	0xa1, 0xa5, 0x2d, 0x7d, 0x4a, 0xa6, 0x98, 0xb3, 0xcc, 0x37, 0x50, 0x53, 0x1e, 0x93, 0x4c, 0x69,
	0x40, 0x1d, 0x4f, 0x08, 0xc0, 0x17, 0xa8, 0x05, 0x1b, 0xa3, 0x59, 0x14, 0x11, 0x5f, 0x2a, 0x20,
	0x97, 0x0b, 0x65, 0xf4, 0xb4, 0x32, 0xd7, 0xd0, 0x58, 0x8e, 0x96, 0x94, 0x8c, 0xaa, 0x4f, 0xcd,
	0x1d, 0x2f, 0x34, 0xd3, 0xf2, 0x6a, 0xd6, 0x03, 0xa4, 0xbc, 0x06, 0x13, 0x79, 0x67, 0x36, 0x54,
	0xae, 0x9d, 0x68, 0x22, 0xee, 0xcc, 0xe8, 0x36, 0x33, 0xe9, 0xab, 0x92, 0xc7, 0x02, 0x65, 0xfd,
	0x9b, 0x3a, 0x5b, 0xe2, 0x25, 0xc9, 0x1a, 0x41, 0x69, 0xe0, 0xfa, 0x89, 0xee, 0xfa, 0x61, 0x0d,
	0xb3, 0x6f, 0xeb, 0x39, 0x6c, 0x63, 0xd1, 0xd5, 0x32, 0xd4, 0x11, 0x54, 0x29, 0x99, 0x86, 0x9e,
	0xbc, 0xe9, 0x45, 0x95, 0x5f, 0x0b, 0x33, 0x56, 0x80, 0xa4, 0x67, 0x16, 0xfc, 0x35, 0x3d, 0x23,
	0xc7, 0xc6, 0x52, 0xcf, 0x28, 0x9e, 0x02, 0x24, 0x5d, 0x2c, 0xad, 0xbf, 0xdb, 0xc5, 0xdd, 0x6f,
	0x3a, 0x54, 0x65, 0xea, 0xa8, 0x03, 0x15, 0x3e, 0xa6, 0x10, 0x62, 0x82, 0x65, 0xa6, 0x9c, 0xd9,
	0xc8, 0xd8, 0x42, 0x6f, 0x6e, 0x15, 0xd0, 0x09, 0x94, 0xd9, 0xdc, 0x41, 0x3b, 0x6c, 0x33, 0x3d,
	0xb4, 0xcc, 0xed, 0xb4, 0x89, 0xc3, 0x8f, 0x41, 0xc7, 0x33, 0x1f, 0xed, 0xb1, 0x9d, 0x25, 0x25,
	0xcd, 0x2d, 0x6e, 0x15, 0xaf, 0x99, 0x55, 0x40, 0xff, 0x43, 0x29, 0x79, 0x5d, 0x50, 0x43, 0x38,
	0x52, 0x0f, 0x93, 0x59, 0x4f, 0x59, 0x38, 0xf6, 0x0c, 0x36, 0xc4, 0x43, 0x81, 0x76, 0xd9, 0x66,
	0xf6, 0xa5, 0x31, 0x77, 0xb2, 0x46, 0x45, 0x12, 0x93, 0x5f, 0x90, 0xb2, 0x4f, 0x87, 0x20, 0xa5,
	0x1f, 0x07, 0xab, 0x90, 0xf4, 0xe3, 0xf0, 0x2e, 0xf8, 0x88, 0xd6, 0xd4, 0x94, 0x89, 0x32, 0x76,
	0xc9, 0x3a, 0x4f, 0xaa, 0x29, 0xa6, 0xa8, 0xb5, 0x6e, 0x0a, 0x99, 0xcd, 0xd5, 0x2d, 0x6a, 0x15,
	0xd0, 0x13, 0xd0, 0x07, 0xc1, 0x04, 0xfd, 0x99, 0x05, 0xa8, 0x6a, 0x37, 0xff, 0xf8, 0x71, 0x83,
	0x11, 0x3b, 0xc5, 0xee, 0xd7, 0x22, 0x54, 0xa5, 0xce, 0xe8, 0x61, 0xf2, 0x3d, 0x71, 0xe3, 0x64,
	0x3a, 0xad, 0xbe, 0x02, 0xb4, 0x64, 0x95, 0x67, 0x87, 0xb7, 0x7e, 0x24, 0x99, 0xcd, 0x0c, 0x66,
	0x39, 0xef, 0x65, 0x6e, 0x56, 0xad, 0x9c, 0xac, 0x8b, 0xbf, 0xdf, 0xfd, 0x35, 0x71, 0xe9, 0xdd,
	0xec, 0xc6, 0x1e, 0x05, 0xd3, 0xb6, 0xf3, 0x29, 0xbe, 0x6b, 0x07, 0x21, 0xf1, 0xef, 0xc7, 0xa3,
	0xb6, 0x13, 0xba, 0x37, 0x15, 0xf6, 0xdf, 0xe7, 0xec, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0xd6, 0x64, 0x66, 0x19, 0x09, 0x00, 0x00,
}
