// Code generated by protoc-gen-go.
// source: executor.proto
// DO NOT EDIT!

/*
Package executor is a generated protocol buffer package.

It is generated from these files:
	executor.proto

It has these top-level messages:
*/
package executor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/axsh/openvdc/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InstanceConsole service

type InstanceConsoleClient interface {
	Attach(ctx context.Context, opts ...grpc.CallOption) (InstanceConsole_AttachClient, error)
}

type instanceConsoleClient struct {
	cc *grpc.ClientConn
}

func NewInstanceConsoleClient(cc *grpc.ClientConn) InstanceConsoleClient {
	return &instanceConsoleClient{cc}
}

func (c *instanceConsoleClient) Attach(ctx context.Context, opts ...grpc.CallOption) (InstanceConsole_AttachClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InstanceConsole_serviceDesc.Streams[0], c.cc, "/executor.InstanceConsole/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceConsoleAttachClient{stream}
	return x, nil
}

type InstanceConsole_AttachClient interface {
	Send(*api.ConsoleIn) error
	Recv() (*api.ConsoleOut, error)
	grpc.ClientStream
}

type instanceConsoleAttachClient struct {
	grpc.ClientStream
}

func (x *instanceConsoleAttachClient) Send(m *api.ConsoleIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *instanceConsoleAttachClient) Recv() (*api.ConsoleOut, error) {
	m := new(api.ConsoleOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InstanceConsole service

type InstanceConsoleServer interface {
	Attach(InstanceConsole_AttachServer) error
}

func RegisterInstanceConsoleServer(s *grpc.Server, srv InstanceConsoleServer) {
	s.RegisterService(&_InstanceConsole_serviceDesc, srv)
}

func _InstanceConsole_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InstanceConsoleServer).Attach(&instanceConsoleAttachServer{stream})
}

type InstanceConsole_AttachServer interface {
	Send(*api.ConsoleOut) error
	Recv() (*api.ConsoleIn, error)
	grpc.ServerStream
}

type instanceConsoleAttachServer struct {
	grpc.ServerStream
}

func (x *instanceConsoleAttachServer) Send(m *api.ConsoleOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *instanceConsoleAttachServer) Recv() (*api.ConsoleIn, error) {
	m := new(api.ConsoleIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _InstanceConsole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "executor.InstanceConsole",
	HandlerType: (*InstanceConsoleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _InstanceConsole_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "executor.proto",
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xad, 0x48, 0x4d,
	0x2e, 0x2d, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x38,
	0xca, 0x0c, 0x21, 0x62, 0x46, 0x4e, 0x5c, 0xfc, 0x9e, 0x79, 0xc5, 0x25, 0x89, 0x79, 0xc9, 0xa9,
	0xce, 0xf9, 0x79, 0xc5, 0xf9, 0x39, 0xa9, 0x42, 0xfa, 0x5c, 0x6c, 0x8e, 0x25, 0x25, 0x89, 0xc9,
	0x19, 0x42, 0x7c, 0x7a, 0x89, 0x05, 0x99, 0x7a, 0x50, 0x71, 0xcf, 0x3c, 0x29, 0x7e, 0x64, 0xbe,
	0x7f, 0x69, 0x89, 0x12, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0x5a, 0x94, 0x4a, 0x7a, 0x66, 0x49,
	0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x62, 0x45, 0x71, 0x86, 0x7e, 0x7e, 0x41, 0x6a,
	0x5e, 0x59, 0x4a, 0xb2, 0x7e, 0x62, 0x41, 0xa6, 0x3e, 0xcc, 0xd6, 0x24, 0x36, 0xb0, 0x95, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x30, 0x77, 0xf7, 0x98, 0x00, 0x00, 0x00,
}
